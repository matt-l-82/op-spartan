<?php
namespace GiveFunds;

use Exception;
use GiveFunds\Repositories\Form;
use GiveFunds\Repositories\Funds;
use GiveFunds\Repositories\Revenue;

/**
 * Class DonationHandler
 * @package GiveFunds
 *
 * @since 2.9.0
 */
class DonationHandler {
	/**
	 * Handle new donation.
	 *
	 * @param  int  $donationId
	 * @param  array  $donationData
	 *
	 * @since 1.0.0
	 *
	 */
	public function handle( $donationId, $donationData ) {
		try {
			$formId = isset( $donationData['give_form_id'] ) ? absint( $donationData['give_form_id'] ) : 0;
			$fundId = $this->getFundId( $formId );

			add_filter(
				'give_revenue_insert_data',
				static function( $revenueData ) use ( $fundId, $donationId ) {
					if ( $donationId !== (int) $revenueData['donation_id'] ) {
						return $revenueData;
					}

					$revenueData['fund_id'] = $fundId;

					return $revenueData;
				}
			);

		} catch ( Exception $e ) {
			error_log(
				sprintf( 'There was an error within the Funds add-on while handling donation %d. %s', $donationId, $e->getMessage() )
			);
		}
	}

	/**
	 * Return fund id for donation generated by donor action.
	 *
	 * @param $formId
	 *
	 * @return int
	 * @since 1.0.0
	 */
	private function getFundId( $formId ) {
		$fundId = null;
		/* @var Funds $fundRepository */
		$fundRepository = give( Funds::class );
		/* @var Form $formRepository*/
		$formRepository = give( Form::class );

		if ( 'donor_choice' === $formRepository->getFundDisplayType( $formId ) ) {
			$fundId = isset( $_POST['give-selected-fund'] ) ? (int) $_POST['give-selected-fund'] : 0;
		} else {
			$fundId = $formRepository->getAdminDefinedFundId( $formId );
		}

		if ( ! $fundId || ! $fundRepository->isFundExist( $fundId ) ) {
			$fundId = $fundRepository->getDefaultFundId();
		}

		return $fundId;
	}

	/**
	 * Map to field option
	 *
	 * @since 1.0.0
	 * @param array $fields
	 *
	 * @return array
	 */
	public function importFields( $fields ) {
		$fields['fund_id'] = esc_html__( 'Fund ID', 'give-funds' );
		return $fields;
	}

	/**
	 * Handle donation import
	 *
	 * @since 1.0.0
	 *
	 * @param Give_Payment $payment
	 * @param array $paymentData
	 * @param array $importData
	 *
	 * @return void
	 */
	public function handleImport( $payment, $paymentData, $importData ) {
		// Check for fund id
		if ( ! isset( $importData['fund_id'] ) ) {
			return;
		}

		$fundId         = (int) $importData['fund_id'];
		$fundRepository = give( Funds::class );

		// Bailout if fund doesn't exist
		if ( ! $fundRepository->isFundExist( $fundId ) ) {
			return;
		}

		// Update Donation fund
		$revenueRepository = give( Revenue::class );
		$revenueRepository->updateDonationFund( $payment->ID, $fundId );
	}
}
